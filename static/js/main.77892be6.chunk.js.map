{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messeges","setMessage","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","prompt","console","log","height","src","FormControl","InputLabel","Input","autoFocus","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"gXAkCeA,G,MA5BCC,sBAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,QACpBC,EADiD,EAApBC,WACPF,EAAQE,SACpC,OAEI,yBACIH,IAAQA,EACZI,UAAS,kBAAgBF,GAAU,kBACnC,kBACAG,EAAA,EADA,CACKD,UAAcF,EAAS,oBAAsB,sBAClD,kBACAI,EAAA,EADA,KAEA,kBACAC,EAAA,EADA,CACWC,MAAQ,QACnBC,QAAU,KACVC,UAAY,OAGVR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,KAND,IAMyDF,EAAQA,QANjE,KAFA,KAFA,U,iBCAOU,GAXKC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,iDACZC,YAAa,wDACbC,UAAW,iCACXC,cAAe,6CACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAERT,IAASU,a,yBC2FLC,MA7Ff,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEoBF,mBAAS,IAF7B,mBAEJG,EAFI,KAEMC,EAFN,OAGqBJ,mBAAS,IAH9B,mBAGJrB,EAHI,KAGM0B,EAHN,KAkCX,OA7BAC,qBAAU,WAGNnB,EAAGoB,WAAW,YACTC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACRN,EAAWM,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,gBAGjD,IAGHR,qBAAU,WAEND,EAAYU,OAAO,wBACpB,IAEHC,QAAQC,IAAIhB,GACZe,QAAQC,IAAId,GAWH,yBACDvB,UAAY,OAChB,yBACIsC,OAAS,OACbC,IAAM,qIAEN,2DANK,IAO4B,uDAP5B,IAQ4B,wCAClBxC,EADkB,KAR5B,IAS4B,0BAC5BC,UAAY,aAEjB,kBACAwC,EAAA,EADA,CACYxC,UAAY,QACxB,kBACAyC,EAAA,EADA,6BAFA,IAG+C,kBAC/CC,EAAA,EAD+C,CACzCC,WAAS,EAAC3C,UAAY,aAC5B4C,MAAUvB,EACVwB,SAAa,SAAAC,GAAK,OAAIxB,EAASwB,EAAMC,OAAOH,UAN5C,KAOI,kBACJI,EAAA,EADI,CACOhD,UAAY,aACvBiD,UACM5B,EACNhB,QAAU,YACVD,MAAQ,UACR8C,KAAO,SACPC,QApCgB,SAACL,GACjBA,EAAMM,iBACN7C,EAAGoB,WAAW,YAAY0B,IAAI,CAC1BxD,QAASwB,EACTtB,SAAUA,EACVuD,UAAW9C,IAASU,UAAUqC,WAAWC,oBAE7ChC,EAAW,GAAD,mBAAKD,GAAL,CAAe,CAAExB,SAAUA,EAAU0D,KAAMpC,MACrDC,EAAS,MA6BT,kBACA,IADA,OAfA,UAwBA,kBACA,IADA,KAKIC,EAASS,KAAI,SAAAnC,GAAO,OAAM,kBACtB,EADsB,CACdE,SAAaA,EACrBF,QAAYA,UC3ER6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAM9E,c","file":"static/js/main.77892be6.chunk.js","sourcesContent":["import React, { forwardRef } from 'react';\r\nimport { Typography, CardContent, Card } from '@material-ui/core';\r\nimport './Message.css';\r\n\r\n\r\n\r\nconst Message = forwardRef(({ message, username }, ref) => {\r\n    const isUser = username === message.username;\r\n    return (\r\n\r\n        <\r\n        div ref = { ref }\r\n        className = { `message ${isUser && 'message__user'}` } >\r\n        <\r\n        Card className = { isUser ? \"message__usercard\" : \"message__guestCard\" } >\r\n        <\r\n        CardContent >\r\n        <\r\n        Typography color = \"white\"\r\n        variant = \"h5\"\r\n        component = \"h2\" >\r\n\r\n\r\n        {!isUser && `${message.username || 'Unknown User'}:` } { message.message } <\r\n        /Typography> <\r\n        /CardContent> <\r\n        /Card>\r\n\r\n        <\r\n        /div>\r\n\r\n    )\r\n})\r\n\r\nexport default Message","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyAYmN2konq3c8cqgSFlaMCKcpdGZsPsa-k\",\r\n    authDomain: \"facebook-messenger-clone-b1763.firebaseapp.com\",\r\n    databaseURL: \"https://facebook-messenger-clone-b1763.firebaseio.com\",\r\n    projectId: \"facebook-messenger-clone-b1763\",\r\n    storageBucket: \"facebook-messenger-clone-b1763.appspot.com\",\r\n    messagingSenderId: \"642400251643\",\r\n    appId: \"1:642400251643:web:6d3c7413249740b0c94a5e\",\r\n    measurementId: \"G-RLDTL6H03E\"\r\n});\r\nconst db = firebase.firestore();\r\nexport default db;","import React, { useState, useEffect } from 'react';\nimport { Button, FormControl, InputLabel, IconButton, Input } from '@material-ui/core';\nimport './App.css';\nimport Message from './Message';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\n\n\nfunction App() {\n    const [input, setInput] = useState('');\n    const [messeges, setMessage] = useState([]);\n    const [username, setUsername] = useState('');\n\n    useEffect(() => {\n\n\n        db.collection('messages')\n            .orderBy('timestamp', 'desc')\n            .onSnapshot(snapshot => {\n                setMessage(snapshot.docs.map(doc => doc.data()))\n            });\n\n    }, [])\n\n\n    useEffect(() => {\n        //    const name = prompt('shreyash ');\n        setUsername(prompt('Enter your name !'));\n    }, [])\n\n    console.log(input);\n    console.log(messeges);\n    const sendMessege = (event) => {\n        event.preventDefault();\n        db.collection('messages').add({\n            message: input,\n            username: username,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\n        })\n        setMessage([...messeges, { username: username, text: input }]);\n        setInput('');\n    }\n    return ( <\n        div className = \"App\" >\n        <\n        img height = '70px'\n        src = \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Facebook_Messenger_4_Logo.svg/1024px-Facebook_Messenger_4_Logo.svg.png\" / >\n\n        <\n        h1 > Hello programmers..â™¥ < /h1> <\n        p > Made by @ShreyashAnpat < /p> <\n        h2 > Welcome { username } < /h2> <\n        form className = \"app__form\" >\n\n        <\n        FormControl className = \"flac\" >\n        <\n        InputLabel > Enter a message... < /InputLabel> <\n        Input autoFocus className = \"inputfield\"\n        value = { input }\n        onChange = { event => setInput(event.target.value) }\n        />  <\n        IconButton className = \"iconbutton\"\n        disabled = {\n            (!input) }\n        variant = \"contained\"\n        color = \"primary\"\n        type = 'submit'\n        onClick = { sendMessege } >\n        <\n        SendIcon / >\n        <\n        /IconButton> { /* <Button disabled ={(!input)} variant=\"contained\" color=\"primary\" type='submit' onClick={sendMessege}>send messege</Button> */ } <\n        /FormControl>\n\n        <\n        /form>\n\n        <\n        FlipMove >\n\n\n        {\n            messeges.map(message => ( <\n                Message username = { username }\n                message = { message }\n                />\n\n            ))\n        }\n\n        <\n        /FlipMove>\n\n        <\n        /div>\n\n\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}